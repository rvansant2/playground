# -*- mode: ruby -*-
# vi: set ft=ruby :

# PROJECT VARIABLES
project_name = "devstack"
ip_address = "172.22.122.110"
env = "local"
set_verbose = true

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "ubuntu/trusty64"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box"

  # Use hostonly network with a static IP Address and enable
  # hostmanager so we can have a custom domain for the server
  # by modifying the host machines hosts file
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.vm.define project_name do |node|
    node.vm.hostname = project_name + "." + env
    node.vm.network :private_network, ip: ip_address
    node.hostmanager.aliases = [ "www." + project_name + "." + env ]
  end
  config.vm.provision :hostmanager

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "./docroot/" + project_name + "/", "/var/www/" + project_name + "." + env + "/", type: "nfs"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  config.vm.provider "virtualbox" do |v|
    v.name = project_name
    v.customize ["modifyvm", :id, "--cpus", "1"]
    # v.customize ["modifyvm", :id, "--cpus", "2"]
    v.customize ["modifyvm", :id, "--cpuexecutioncap", "85"]
    # v.customize ['modifyvm', :id, '--ioapic', 'on']
    v.customize ["modifyvm", :id, "--memory", "2048"]
  end

  # Setup provisioning with an ansible playbook
  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "provisioning/site.yml"
    ansible.groups = {
      "web" => [project_name],
      "database" => [project_name],
      "memcache" => [project_name]
    }
    ansible.extra_vars = {
      "project_name" => project_name,
      "env" => env
    }

    if set_verbose
      ansible.verbose = "vvvv"
    end
  end
end